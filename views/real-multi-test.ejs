<!DOCTYPE html>
<html>
<head>
    <title>Real Multi-User Test</title>
    <style>
        body { font-family: Arial; padding: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
        .test-section { 
            border: 1px solid #ddd; 
            padding: 15px; 
            margin: 15px 0; 
            border-radius: 5px; 
            background: #fafafa;
        }
        .login-section { background: #e8f4fd; border-color: #bee5eb; }
        .status-section { background: #f8f9fa; border-color: #dee2e6; }
        button { 
            padding: 10px 20px; 
            margin: 5px; 
            background: #007bff; 
            color: white; 
            border: none; 
            border-radius: 3px; 
            cursor: pointer; 
        }
        button:hover { background: #0056b3; }
        .logout-btn { background: #dc3545; }
        .logout-btn:hover { background: #c82333; }
        .status { font-weight: bold; margin: 10px 0; padding: 10px; border-radius: 3px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #b8daff; }
        pre { background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê Multi-User Authentication Test</h1>
        <p><strong>Instructions:</strong> Test logging in multiple users in the same browser</p>
        
        <div class="test-section login-section">
            <h3>Login Test Users</h3>
            <p>Click the buttons below to login different users:</p>
            <button onclick="loginUser('miku@gmail.com', '123456')">Login as Miku</button>
            <button onclick="loginUser('eren@gmail.com', '123456')">Login as Eren</button>
            <button class="logout-btn" onclick="logout()">Logout Current User</button>
        </div>
        
        <div class="test-section status-section">
            <h3>Current Authentication Status</h3>
            <div id="authStatus" class="status info">Loading...</div>
            <button onclick="checkAuthStatus()">Refresh Status</button>
        </div>
        
        <div class="test-section">
            <h3>Multi-User Test Steps</h3>
            <ol>
                <li><strong>Step 1:</strong> Click "Login as Miku" - should login successfully</li>
                <li><strong>Step 2:</strong> Open new tab, paste this URL, click "Login as Eren"</li>
                <li><strong>Step 3:</strong> Switch between tabs - each should show different user</li>
                <li><strong>Step 4:</strong> Both tabs should maintain separate user sessions</li>
            </ol>
        </div>
        
        <div class="test-section">
            <h3>Debug Information</h3>
            <div id="debugInfo">
                <pre>Checking authentication details...</pre>
            </div>
        </div>
    </div>
    
    <script>
        async function loginUser(email, password) {
            try {
                updateStatus('üîÑ Attempting login...', 'info');
                
                const response = await fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`,
                    credentials: 'include'
                });

                if (response.ok) {
                    // Check if login was successful by looking at the response
                    const responseText = await response.text();
                    if (responseText.includes('login') && responseText.includes('error')) {
                        updateStatus('‚ùå Login failed - check credentials', 'error');
                    } else {
                        updateStatus(`‚úÖ Successfully logged in as ${email}`, 'success');
                        setTimeout(checkAuthStatus, 1000);
                    }
                } else {
                    updateStatus(`‚ùå Login failed - HTTP ${response.status}`, 'error');
                }
            } catch (error) {
                updateStatus(`‚ùå Login error: ${error.message}`, 'error');
            }
        }

        async function logout() {
            try {
                const response = await fetch('/logout', {
                    method: 'POST',
                    credentials: 'include'
                });

                if (response.ok) {
                    updateStatus('‚úÖ Logged out successfully', 'success');
                    setTimeout(checkAuthStatus, 1000);
                } else {
                    updateStatus('‚ùå Logout failed', 'error');
                }
            } catch (error) {
                updateStatus(`‚ùå Logout error: ${error.message}`, 'error');
            }
        }

        async function checkAuthStatus() {
            try {
                // Try to access the homepage to check authentication
                const response = await fetch('/', {
                    credentials: 'include'
                });
                
                const html = await response.text();
                
                // Parse the HTML to extract user information
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Look for user information in various places
                let userInfo = 'Not logged in';
                let isLoggedIn = false;
                
                // Check for common user display patterns
                const navElements = doc.querySelectorAll('nav, .navbar, .user-info, .profile');
                for (let element of navElements) {
                    if (element.textContent.includes('@') || element.textContent.includes('Welcome')) {
                        userInfo = element.textContent.trim();
                        isLoggedIn = true;
                        break;
                    }
                }
                
                // Also check for login link
                const loginLink = doc.querySelector('a[href*="login"]');
                if (loginLink && !isLoggedIn) {
                    userInfo = 'Not logged in (login link found)';
                }
                
                if (isLoggedIn) {
                    updateStatus(`‚úÖ Currently logged in: ${userInfo}`, 'success');
                } else {
                    updateStatus('‚ùå Not logged in', 'error');
                }
                
                // Update debug info
                document.getElementById('debugInfo').innerHTML = `
                    <pre>
Response Status: ${response.status}
Page Title: ${doc.title || 'No title'}
Has Login Form: ${doc.querySelector('form[action*="login"]') ? 'Yes' : 'No'}
Has User Nav: ${isLoggedIn ? 'Yes' : 'No'}
User Info: ${userInfo}
Cookies: ${document.cookie || 'None visible'}
Timestamp: ${new Date().toLocaleTimeString()}
                    </pre>
                `;
                
            } catch (error) {
                updateStatus(`‚ùå Status check error: ${error.message}`, 'error');
            }
        }

        function updateStatus(message, type) {
            const statusDiv = document.getElementById('authStatus');
            statusDiv.innerHTML = message;
            statusDiv.className = `status ${type}`;
        }

        // Check status on page load
        checkAuthStatus();
        
        // Auto-refresh every 15 seconds
        setInterval(checkAuthStatus, 15000);
    </script>
</body>
</html>
